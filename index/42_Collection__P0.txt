
The most basic collection interface is called Collection. This interface gives the user a generic usage of a collection. All collections need to have the same basic operations. Those are:
When you put an object in a collection, this object is not actually in the collection. Only its object reference is added to the collection. This means that if an object is changed after it was put in an collection, the object in the collection also changes. The code listing 5.2 computes the seven next days from tomorrow and store each date in a list to read it after. See what happens:
 The next day is: Thu Feb 4 17:03:47 UTC 2016  The next day is: Thu Feb 4 17:03:47 UTC 2016  The next day is: Thu Feb 4 17:03:47 UTC 2016  The next day is: Thu Feb 4 17:03:47 UTC 2016  The next day is: Thu Feb 4 17:03:47 UTC 2016  The next day is: Thu Feb 4 17:03:47 UTC 2016  The next day is: Thu Feb 4 17:03:47 UTC 2016
Each collection items were said to be updated to a different date but they all have been updated to the last one. It means that each update has updated all the collection items. And this is the case. The currentDate has been used to fill all the collection items. The collection didn't keep trace of the added values (one of the seven dates) but the added object references (currentDate). So the collection contains the same object seven times! To avoid this issue, we should have coded it this way:
 The next day is: Fri Jan 29 17:03:47 UTC 2016  The next day is: Sat Jan 30 17:03:47 UTC 2016  The next day is: Sun Jan 31 17:03:47 UTC 2016  The next day is: Mon Feb 1 17:03:47 UTC 2016  The next day is: Tue Feb 2 17:03:47 UTC 2016  The next day is: Wed Feb 3 17:03:47 UTC 2016  The next day is: Thu Feb 4 17:03:47 UTC 2016
Now each time we add an item to the collection, it is a different instance. All the items evolve separately. To add an object in a collection and avoid this item to be changed each time the source object is changed, you have to copy or clone the object before you add it to the collection.

